docked() {
  xrandr --output HDMI1 --auto --same-as eDP1
  xbacklight -set 0
  setxkbmap -option caps:swapescape
  echo 1 > /home/benp/mirroring
}

undock() {
  xrandr --output HDMI1 --off
  xbacklight -set 70
  echo 0 > /home/benp/mirroring
}

# grep shorthands
psgrep() { ps aux | grep -i $@ }
hgrep() { history | grep -i $@ }

# find shorthand
function f() {
    find . -name "$1"
}

# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd $_
}

# Create a git.io short URL
function gitio() {
  if [ -z "${1}" -o -z "${2}" ]; then
    echo "Usage: \`gitio slug url\`"
    return 1
  fi
  curl -i http://git.io/ -F "url=${2}" -F "code=${1}"
}

# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}

# get gzipped size
function gz() {
  echo "orig size    (bytes): "
  cat "$1" | wc -c
  echo "gzipped size (bytes): "
  gzip -c "$1" | wc -c
}

# All the dig info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
  echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
  echo # newline
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
  if [ $# -eq 0 ]; then
    if [ -f "$PWD/Session.vim" ]; then
      nvim -S
    else
      nvim .
    fi
  else
    nvim "$@"
  fi
}

# backup the enterprise!
function beammeup() {
  sudo rsync -av --delete --progress -e ssh \
    --exclude=node_modules/ \
    --exclude=/benp/Videos/ \
    --exclude=/benp/Music/ \
    --exclude=/benp/Dropbox/ \
    --exclude=/benp/.cache/ \
    --exclude=/benp/.rbenv/ \
    --exclude=/benp/.npm/ \
    --exclude=/benp/.gvm/ \
    --exclude=/benp/.config/google-chrome/ \
    --exclude=/benp/.config/chromium/ \
    --exclude=/benp/Downloads/ \
    --exclude=/benp/VirtualBox\ VMs/ \
    ~ root@192.168.1.118:/volume1/NetBackup/enterprise/
}

function buildWiki() {
  cd ~/clock/wiki && git pull origin master && find ./ -name "*.md" -type f -exec sh -c 'mkdir -p ./build/$(dirname "$0") && marked "$0" > ./build/"${0%.md}.html"' {} \; && cd -
}

# password protect a file with zip, using a password generated with openssl
# arguments in the same order as the zip command, <output file name> <input file>
function zipp () {
  local password=$(openssl rand -base64 8)
  zip -j -P $password $1 $2 > /dev/null
  echo $password | clip
}

function mo () {
  mongo $(mongo --quiet --eval 'db.getMongo().getDBNames().join("\n")' | grep -v '^test' | sort | fzf --query=$1)
}
